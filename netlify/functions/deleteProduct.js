import { readJSON, writeJSON, deletePath } from "./_shared.mjs";
export async function handler(event){try{if(event.httpMethod!=="POST")return{statusCode:405,body:"Method Not Allowed"};const {id,categoryId}=JSON.parse(event.body||"{}");if(!id)return{statusCode:400,body:"product id required"};await deletePath(`products/${id}.json`,`DELETE product ${id}`);if(categoryId){const cpPath=`cats_products/${categoryId}.json`; const curCP=await readJSON(cpPath);if(curCP.json){const before=curCP.json.products.length;curCP.json.products=curCP.json.products.filter(p=>p.id!==id);if(curCP.json.products.length!==before){await writeJSON(cpPath,curCP.json,curCP.sha,`REMOVE product ${id} from category ${categoryId}`);const cPath="cats/cat.json"; const curC=await readJSON(cPath); let cats=curC.json||[];const ci=cats.findIndex(c=>c.id===categoryId);if(ci>=0){cats[ci].productCount=curCP.json.products.length; await writeJSON(cPath,cats,curC.sha,`SYNC category ${categoryId} productCount`);}}}}await deletePath(`products_comments/${id}.json`,`DELETE comments for product ${id}`).catch(()=>{});return{statusCode:200,body:JSON.stringify({ok:true})};}catch(e){return{statusCode:500,body:String(e)}}}