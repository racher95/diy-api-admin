import { readJSON, writeJSON } from "./_shared.mjs";
export async function handler(event){try{if(event.httpMethod!=="POST")return{statusCode:405,body:"Method Not Allowed"};const {op="create",product}=JSON.parse(event.body||"{}");if(!product)return{statusCode:400,body:"product object required"};const {id,name,description="",cost,currency="UYU",soldCount=0,image,images=[],categoryId,categoryName}=product;if(!id||!name||cost===undefined||!image||!categoryId||!categoryName)return{statusCode:400,body:"missing required product fields"};const pPath=`products/${id}.json`; const curP=await readJSON(pPath);const detail={id,name,description,cost,currency,soldCount,category:{id:categoryId,name:categoryName},images:images.length?images:[image],relatedProducts:[]};await writeJSON(pPath,detail,curP.sha,`${op.toUpperCase()} product ${id}`);const cpPath=`cats_products/${categoryId}.json`; const curCP=await readJSON(cpPath);const payload=curCP.json||{catID:categoryId,catName:categoryName,products:[]};const compact={id,name,description,cost,currency,soldCount,image};const i=payload.products.findIndex(x=>x.id===id); if(i>=0)payload.products[i]=compact; else payload.products.push(compact);await writeJSON(cpPath,payload,curCP.sha,`${op.toUpperCase()} product in category ${categoryId}`);const cPath="cats/cat.json"; const curC=await readJSON(cPath); let cats=curC.json||[];const ci=cats.findIndex(c=>c.id===categoryId);if(ci>=0){cats[ci].name=categoryName; cats[ci].productCount=payload.products.length;} else {cats.push({id:categoryId,name:categoryName,description:"Categor√≠a DIY",imgSrc:"",productCount:payload.products.length});}await writeJSON(cPath,cats,curC.sha,`SYNC category ${categoryId} productCount`);return{statusCode:200,headers:{"Content-Type":"application/json"},body:JSON.stringify({ok:true})};}catch(e){return{statusCode:500,body:String(e)}}}